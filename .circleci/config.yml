# This code is licensed from CircleCI to the user under the MIT license.
# See here for details: https://circleci.com/developer/orbs/licensing
version: 2.1

executors:
  scanner:
    docker:
      - image: circleci/openjdk:11-jdk
  default:
    description: |
      This is default executor
    machine: 
      image: ubuntu-2004:202107-02

commands:
  setup-environment:
    description: "Setup Sonarcloud requirements"
    steps:
      - run:
          name: "Setup environment"
          command: |
            apk update
            apk add --no-cache zip openjdk11-jre-headless
            
  install-engine:
    description: "Install Sonarqube scanner"
    parameters:
      engine_version:
        type: string
        default: "4.6.2.2472"
    steps:
      - run:
          name: "Install Sonarqube scanner"
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-<< parameters.engine_version >>.zip
            unzip sonar-scanner-cli-<< parameters.engine_version >>.zip
  




  code-analysis:
    description: "Run Sonarqube scanner for code analysis"
    parameters:
      organization:
        type: string
      host_url:
        type: string
      login:
        type: string
      projectKey:
        type: string
      projectBaseDir:
        type: string
        default: "/root/circleci-build"
      sources:
        type: string
        default: "."
      runner_opts:
        type: string
        default: "-Xms1024m -Xmx4096m"
      exclusions:
        type: string
        default: "**/*.yaml,**/*.yml"
      engine_version:
        type: string
        default: "4.6.2.2472"
    steps:
      - run:
          name: "Code analysis"
          command: |
            export SONAR_RUNNER_OPTS="<< parameters.runner_opts >>"
            mvn -f /home/circleci/project/pom.xml sonar:sonar \
              -Dsonar.host.url=${<< parameters.host_url >>} \
              -Dsonar.login=${<< parameters.login >>} \
              -Dsonar.projectKey=${<< parameters.projectKey >>} \
              -Dsonar.projectBaseDir=<< parameters.projectBaseDir >> \
              -Dsonar.organization=${<< parameters.organization >>} \
              -Dsonar.sources=<< parameters.sources >> \
              -Dsonar.exclusions="<< parameters.exclusions >>"
      
  
jobs:
  zap-scan:
    executor: default
    description: Runs zap-baseline scan on target website.
    steps:
      #- checkout
      #- attach_workspace:
        #  at: .
      #- run:
       #   command: echo "$(date +%U)-$(date +%Y)" > current_weak_information.txt
        #  name: Create file with current year and weak information - needed for cache
     # - restore_cache:
      #    keys:
       #     - zap-check-data-v1-{{ checksum "current_weak_information.txt" }}
        #    - zap-check-data-v1-
      
      - run:
          # run zap baseline against the server
          # Only fail on error code 1, which indicates at least one FAIL was found.
          # error codes 2 & 3 indicate WARN or other, and should not break the run
          name: Run OWASP ZAP Baseline
          #docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
           #     -t https://google-gruyere.appspot.com/409976138208656853771250675759008232039/ -g gen.conf -r testreport.html
            #  docker run -i owasp/zap2docker-stable zap-cli quick-scan --self-contained \
             #   --start-options --spider '-config api.disablekey=true' https://google-gruyere.appspot.com/409976138208656853771250675759008232039/
              #docker run --name zap -u root -v "$(pwd)/reports":/zap/reports/:rw \
               # -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080 \
                #-config api.disablekey=true
              #docker exec  --zap-path zap  zap-cli quick-scan http://www.itsecgames.com
               #docker run  --name zap -i owasp/zap2docker-stable \
                #zap-cli quick-scan \
                #--self-contained \
                #--start-options '-config api.disablekey=true' \
                #--spider\
                #https://google-gruyere.appspot.com/409976138208656853771250675759008232039/ \
          command: |
            docker pull owasp/zap2docker-stable
            (             
              docker run --detach --name zap -u root -v "$(pwd)/reports":/zap/reports/:rw \
                -i owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080 \
                -config api.disablekey=true
              docker exec zap zap-cli --zap-path /zap -v start -o '-config api.disablekey=true'
              docker exec zap zap-cli -v quick-scan --spider http://testhtml5.vulnweb.com/
              docker exec zap zap-cli -v report -o /zap/reports/report.html -f html
              docker exec zap zap-cli -v shutdown
              
              if [ $? -ne 1 ]; then exit 0; else exit 1; fi;              
            )
      #- save_cache:
       #   key: zap-check-data-v1-{{ checksum "current_weak_information.txt" }}
        #  paths:
            #- zap-audit-data
      #- persist_to_workspace:
         # paths:
          #  - odc-reports
          #root: .
      
  
          
  sonar-analyze:
    parameters:
      organization:
        type: env_var_name
        default: SONAR_ORGANIZATION
      host_url:
        type: env_var_name
        default: SONAR_URL
      login:
        type: env_var_name
        default: SONAR_TOKEN
      projectKey:
        type: env_var_name
        default: SONAR_PROJECT_KEY #CIRCLE_PROJECT_REPONAME --
      projectVersion:
        type: env_var_name
        default: CIRCLE_BUILD_NUM
    executor: scanner
    steps:
      - checkout
      - install-engine
      - code-analysis:
          login: << parameters.login >>
          host_url: <<parameters.host_url >>
          organization: << parameters.organization >>
          projectKey: << parameters.projectKey >>
          projectBaseDir: ./

workflows:
  build_test_deploy:
    jobs:
      - sonar-analyze
      #- arachni-scan
      - zap-scan
